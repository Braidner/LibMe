function lmInput(){return{scope:{bindModel:"=ngModel"},require:"ngModel",transclude:!0,templateUrl:"/app/control/input/input-control.html",link:function(e,t,n,o){"use strict"}}}!function(){"use strict";function e(e){e.activeTab="/",e.$on("$routeChangeStart",function(t,n){n.$$route&&(e.activeTab=n.$$route.originalPath)})}function t(e,t){e.otherwise({redirectTo:"/"}),t.html5Mode(!0)}function n(e,t,n){e.$on("$routeChangeSuccess",function(){n.ga&&n.ga("send","pageview",{page:t.path()})})}function o(e){function t(t){var n,o=$(".menu-indicator"),r=$("li.active-menu").index();n=e.tabs[t.index],r>t.index?(o.removeClass("right"),o.addClass("left"),o.css({left:n.left}),o.css({right:n.right})):(o.removeClass("left"),o.addClass("right"),o.css({right:n.right}),o.css({left:n.left}))}e.$on("$routeChangeStart",function(n,o){var r=$("menu ul").width();$("menu ul li").each(function(n,o){var i=$(o).outerWidth(),l=e.tabs[n];if(l.index=n,0===n)l.left=0,l.right=r-i;else{var a=e.tabs[n-1];l.left=r-a.right,l.right=a.right-i}e.activeTab.indexOf(l.id)>-1&&t(l)})}),e.tabs=[new r("/","Все"),new r("/film","Фильмы"),new r("/serial","Сериалы"),new r("/anime","Аниме"),new r("/other","Прочее")],e.selectTab=t}function r(e,t,n){this.id=e,this.name=t,this.selected=n}angular.module("App",["ngRoute","ngAnimate","ContentModule","ControlsModule","ContentCardModule","ItemModule","UploadModule","ProfileModule","RecentModule"]).config(t).run(e).run(n).controller("NavigationCtrl",o),e.$inject=["$rootScope"],t.$inject=["$routeProvider","$locationProvider"],n.$inject=["$rootScope","$location","$window"],o.$inject=["$scope"],r.prototype={id:"",name:"",selected:!1},angular.module("App").directive("background",function(){return function(e,t,n){var o=n.background;t.css({"background-image":"url("+o+")","background-size":"cover"})}})}(),function(){function e(e){"ngInject";e.when("/",{templateUrl:"/app/content/content.html",controller:"AllContentCtrl"}).when("/film",{templateUrl:"/app/content/content.html",controller:"FilmContentCtrl"}).when("/serial",{templateUrl:"/app/content/content.html",controller:"SerialContentCtrl"})}function t(e,t){"ngInject";e.content=t.findContent()}function n(e,t){"ngInject";e.content=t.findContent(null,"Film")}function o(e,t){"ngInject";e.content=t.findContent(null,"Serial")}e.$inject=["$routeProvider"],angular.module("ContentModule",["ContentServices"]).config(e).controller("AllContentCtrl",t).controller("SerialContentCtrl",o).controller("FilmContentCtrl",n),t.$inject=["$scope","ContentService"],n.$inject=["$scope","ContentService"],o.$inject=["$scope","ContentService"]}(),function(){"use strict";function e(e){"ngInject";function t(e,t){return r.query({name:e,type:t})}function n(e){var t=new r(e);return t.$save(),t}var o=this,r=e("/rest/content",{},{});return o.findContent=t,o.createContent=n,o}e.$inject=["$resource"],angular.module("ContentServices",["ngResource"]).service("ContentService",e)}(),function(){function e(e){"ngInject";e.when("/film/:content_id",{templateUrl:"/app/content-card/content-card.html",controller:"FilmCardCtrl"}).when("/serial/:content_id",{templateUrl:"/app/content-card/content-card.html",controller:"SerialCardCtrl"})}function t(){"ngInject"}function n(){"ngInject"}e.$inject=["$routeProvider"],angular.module("ContentCardModule",[]),angular.module("ContentCardModule").config(e).controller("FilmCardCtrl",t).controller("SerialCardCtrl",n)}(),function(){function e(e){"ngInject";function t(t,n,o){n.on("click",function(n){e.path("/"+angular.lowercase(t.item.type)+"/"+t.item.id),t.$apply()})}return{link:t,restrict:"E",replace:!0,scope:{item:"="},templateUrl:"/app/item/item.html"}}angular.module("ItemModule",[]).directive("contentItem",e),e.$inject=["$location"]}(),function(){"use strict";angular.module("ControlsModule",["control.input-control","control.parser"])}(),function(){"use strict";function e(e){"ngInject";e.when("/profile",{templateUrl:"/app/profile/profile.html",controller:"ProfileCtrl"})}function t(e){function t(e){return profile.perms.indexOf(e)>-1}e.profile={login:"Braidner",perms:["user:edit:profile"]},e.hasPermission=t}function n(e){"ngInject"}e.$inject=["$routeProvider"],t.$inject=["$rootScope"],n.$inject=["$scope"],angular.module("ProfileModule",[]),angular.module("ProfileModule").config(e),angular.module("ProfileModule").run(t),angular.module("ProfileModule").controller("ProfileCtrl",n)}(),function(){"use strict";function e(e){e.content=[{name:"Frozen",poster:"http://www.kinopoisk.ru/images/film_big/493208.jpg"},{name:"Batman v Superman: Dawn of Justice",poster:"http://www.kinopoisk.ru/images/film_big/770631.jpg"},{name:"The Justice League Part One",poster:"http://www.kinopoisk.ru/images/film_big/424994.jpg"},{name:"The flash",poster:"http://www.kinopoisk.ru/images/film_big/817506.jpg"},{name:"The Justice League Part One",poster:"http://www.kinopoisk.ru/images/film_big/424994.jpg"},{name:"Frozen",poster:"http://www.kinopoisk.ru/images/film_big/493208.jpg"},{name:"Batman v Superman: Dawn of Justice",poster:"http://www.kinopoisk.ru/images/film_big/770631.jpg"},{name:"Untitled Spider-Man Reboot",poster:"http://www.kinopoisk.ru/images/film_big/690593.jpg"}]}angular.module("RecentModule",[]).controller("RecentCtrl",e),e.$inject=["$scope"],angular.module("RecentModule").directive("owlCarousel",function(){var e=function(e,t,n){var o=function(){t.owlCarousel({loop:!1,nav:!1,responsive:{1200:{items:6},992:{items:4},768:{items:3},479:{items:2}}})};e.$watchCollection(n.owlCarousel,function(){o()})};return{restrict:"A",link:e}})}(),function(){"use strict";function e(e){e.when("/upload",{templateUrl:"/app/upload/upload.html",controller:"UploadCtrl"})}function t(e,t){e.content=[{type:"film",name:"Frozen",poster:"http://www.kinopoisk.ru/images/film_big/493208.jpg"},{type:"serial",name:"Batman v Superman: Dawn of Justice",poster:"http://www.kinopoisk.ru/images/film_big/770631.jpg"},{type:"serial",name:"The flash",poster:"http://www.kinopoisk.ru/images/film_big/817506.jpg"},{type:"film",name:"The Justice League Part One",poster:"http://www.kinopoisk.ru/images/film_big/424994.jpg"},{type:"film",name:"Untitled Spider-Man Reboot",poster:"http://www.kinopoisk.ru/images/film_big/690593.jpg"},{type:"serial",name:"Frozen",poster:"http://www.kinopoisk.ru/images/film_big/493208.jpg"}]}function n(e){}angular.module("UploadModule",["ngResource"]),angular.module("UploadModule").config(e),angular.module("UploadModule").controller("UploadCtrl",t),angular.module("UploadModule").controller("FastUploadCtrl",n),e.$inject=["$routeProvider"],t.$inject=["$scope","ContentService"],n.$inject=["$scope"]}(),angular.module("control.input-control",[]).directive("lmInput",lmInput),function(){function e(){return{scope:{bindModel:"=ngModel"},require:"ngModel",transclude:!0,templateUrl:"/app/control/input/input-control.html",link:function(e,t,n,o){"use strict"}}}angular.module("control.parser",[]),angular.module("ControlsModule").directive("lmUrlParser",e)}();
//# sourceMappingURL=data:application/json;base64,
